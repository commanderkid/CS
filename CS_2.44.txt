x = x_min => 1000 0000 0000 0000 0000 0000 0000 0000

1. (x > 0) || ( x - 1 > 0) == 1 // x = -1 => (-1 > 0) || ( -1 - 1 > 0) => 0 || ( -2 > 0) => 0 || 0 = 0 - Fail
2. (x & 7) != 7 || (x << 29 < 0) => (x = 0111) => 0 || 1 = 1 - Ok;
3. (x * x) >= 0 => x^2 >= 0 => Fail
4. x < 0 || -1 * x <= 0  - Ok
5. x > 0 || -1 * x >= 0 => max = 0111 , min = 1000 => Fail if x = min
6. x + y == ux + uy => Fail x = 0111, y = 0001 => Ok 
7. x * ~y + uy * ux == -x => x = 0001 y = 1000 = > x * ~y = 0001 * 0111 => 0001 * 1000 => 0111 * 1000 = 1111 - Fail
-------------------------------------------------------------------------------------------------------------------
uy * ux =>
//-----------------------------------------------------------------------------------------------------------------
7. x * ~y + uy * ux == -x => x = 0001 y = 1000 = > x * ~y = 0001 * 0111 => 0001 * 1000 => 0111 * 1000 = 1111 - Fail
x = -128, y = -127, ~y = 126, ux = 128, uy = 129:
#include <stdio.h>
#include <limits.h>

void main()
{
    unsigned char ux, uy;
    
    for(signed char x = SCHAR_MIN; x <= SCHAR_MAX; x++) {
        for(signed char y = SCHAR_MIN; y <= SCHAR_MAX; y++) {
            
            ux = (unsigned char)x;
            uy = (unsigned char)y;
            
            int ans = x * (~y) + uy * ux == - 1 * x;
            
            if(ans == 0){
                printf("x = %i, y = %i, ~y = %i, ux = %u, uy = %u:", x, y, ~y, ux, uy);
                return;
            }
        }
    }
}
